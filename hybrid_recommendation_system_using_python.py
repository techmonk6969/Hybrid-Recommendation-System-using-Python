# -*- coding: utf-8 -*-
"""Hybrid Recommendation System using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGhtXCG-NQ3kiG4mhfER_8aLIz_9Vwcv
"""

import pandas as pd
data = pd.read_csv('/content/fashion_products.csv')
print(data.head())

!pip install scikit-surprise

from surprise import Dataset, Reader, SVD
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

from operator import index
from sklearn.feature_extraction.text import TfidfVectorizer # Import the missing class
content_df = data[['Product ID', 'Product Name', 'Brand', 'Category', 'Color', 'Size']]
content_df['Content'] = content_df.apply(lambda row: ' '.join(row.dropna().astype(str)), axis=1)

tfdif_vectorizer = TfidfVectorizer()
content_matrix = tfdif_vectorizer.fit_transform(content_df['Content'])
content_similarility = linear_kernel(content_matrix, content_matrix)
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(data[['User ID', 'Product ID', 'Rating']], reader)

def get_content_based_recommendations(product_id, top_n):
    index = content_df[content_df['Product ID'] == product_id].index[0]
    similarity_scores  = content_similarility[index]
    similar_indices = similarity_scores.argsort()[::1][1:top_n + 1]
    recommendations = content_df.iloc[similar_indices]
    return recommendations

algo = SVD()
trainset = data.build_full_trainset()
algo.fit(trainset)

def get_user_recommendations(user_id, top_n):
    testset = trainset.build_anti_testset()
    testset  = filter(lambda x: x[0] == user_id, testset)
    predictions = algo.test(testset)
    predictions.sort(key=lambda x: x.est, reverse=True)
    recommendations = [pred.iid for pred in predictions[:top_n]]
    return recommendations

def get_hybrid_recommendations(user_id, product_id, top_n):
    content_bsed_recommendations = get_content_based_recommendations(product_id, top_n)
    collaborative_filtering_recommendations = get_user_recommendations(user_id, top_n) # Call the correct function name
    hybrid_recommendations = list(set(content_bsed_recommendations['Product ID']) & set(collaborative_filtering_recommendations)) # Remove 'Product ID' since get_user_recommendations returns a list of IDs
    return hybrid_recommendations[:top_n]

user_id = 6
product_id = 11
top_n = 10
recommendations = get_hybrid_recommendations(user_id, product_id, top_n)

print(f"Hybrid Recommendations for User {user_id} based on Product {product_id}:")
for i, recommendation in enumerate(recommendations):
    print(f"{i + 1}. Product ID: {recommendation}")
    print(f"{i + 1}. Product ID: {recommendation}")

